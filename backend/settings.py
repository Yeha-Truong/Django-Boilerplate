"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r9w=-76kfc8hv7j-3!c(=k_n-24#*atsr-5il7zl=ad+i%0fla'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    "rest_framework",
    "rest_framework.versioning",
    "knox",
    "django_filters",
    "more_itertools",
    "core",
    "account",
    "teacher",
    "student",
    "media",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "core.middlewares.ExceptionMiddleware",
    "core.middlewares.ResponseFormatterMiddleware",
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # SQLite
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
        # Transaction
        "ATOMIC_REQUESTS": True,
    }

    # Postgres
    # "default": {
    #     "ENGINE": "django.db.backends.postgresql",
    #     "NAME": "postgres",
    #     "USER": "postgres",
    #     "PASSWORD": "postgres",
    #     "HOST": "127.0.0.1",
    #     "PORT": "5432",
    # }
}

# User model
AUTH_USER_MODEL = "core.User"

# Authentication backends
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend', 'account.backends.EmailBackend']

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Rest Framework
REST_FRAMEWORK = {
    # Authentication
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "knox.auth.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    # Versioning
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.AcceptHeaderVersioning",
    "DEFAULT_VERSION": "1",
    "ALLOWED_VERSIONS": ["1"],
    # Pagination
    "DEFAULT_PAGINATION_CLASS": "core.paginations.CursorPagination",
    "PAGE_SIZE": 20,
    # Throttling
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "10/minute", "user": "60/minute"},
    # Schema
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.openapi.AutoSchema",
    # Exception
    "EXCEPTION_HANDLER": "core.handlers.exception_handler",
    # Render
    # "DEFAULT_RENDERER_CLASSES": [
    #     "rest_framework.renderers.JSONRenderer",
    # ],
}

# Rest Knox
REST_KNOX = {
    "TOKEN_TTL": timedelta(hours=1),
    "TOKEN_LIMIT_PER_USER": 1,
    "USER_SERIALIZER": "core.serializers.UserSerializer",
    "AUTO_REFRESH": True,
    "MIN_REFRESH_INTERVAL": 300,
    "AUTH_HEADER_PREFIX": "Bearer",
}

# CORS
# CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOWED_ORIGINS = ["http://localhost:3000"]

# SSL Certificate and Key

# Use HTTPS
# SECURE_SSL_REDIRECT = True
# SECURE_SSL_HOST = None
# SECURE_SSL_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# SSL Certificate and Key
# SECURE_SSL_CERTIFICATE = 'certs/cert.pem'
# SECURE_SSL_KEY = 'certs/key.pem'

# Sentry
sentry_sdk.init(
    dsn="https://f4a5ddc1f8e74626ae6c359149818fc9@o4505120935247872.ingest.sentry.io/4505120936624128",
    integrations=[
        DjangoIntegration(),
    ],
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
)

# Logging
LOGGING = {
    "version": 1.0,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} {name} {levelname} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "file": {
            "class": "logging.FileHandler",
            "filename": "general.log",
            "formatter": "verbose",
        },
        "sql": {
            "class": "logging.FileHandler",
            "filename": "sql.log",
            "formatter": "verbose",
        },
        "console": {
            "class": "logging.StreamHandler",
            "filters": ["require_debug_true"],
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
        "papertrail": {
            "level": "DEBUG",
            "class": "logging.handlers.SysLogHandler",
            "formatter": "verbose",
            "address": ("logs3.papertrailapp.com", 28037),
        },
    },
    "loggers": {
        "": {
            "level": "DEBUG",
            "handlers": ["file", "papertrail"],
        },
        "django.db.backends": {
            "level": "DEBUG",
        },
        "django.server": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Media
MEDIA_URL = "/storage/"
MEDIA_ROOT = os.path.join(BASE_DIR, "storage")